@page "/inmemory"
@using Microsoft.EntityFrameworkCore
@using System.Collections.Generic
@using BlazorWasmEFCore.Client.Helpers


@inject InMemoryDbContext Context


<h1>EFCore InMemrory Table</h1>

<PageTitle>EFCore InMemrory Table</PageTitle>


<p>Este componente demuestra como obtener información con Entity Framework Core InMemory.</p>

@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Temp. (C)</th>
                <th>Temp. (F)</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in forecasts)
            {
                <tr>
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.TemperatureF</td>
                    <td>@forecast.Summary</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private IEnumerable<WeatherForecast>? forecasts;

    protected override async Task OnInitializedAsync()
    {
        bool hasItems = await Context.WeatherForecast.AnyAsync();

        if (!hasItems)
        {
            await Context.WeatherForecast.AddRangeAsync(WeatherForecastHelper.GetWeatherForecasts().WithId());

            await Context.SaveChangesAsync();
        }

        forecasts = await Context.WeatherForecast.ToListAsync();
    }
}
